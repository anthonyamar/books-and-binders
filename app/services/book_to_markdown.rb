require 'active_support/all'

class BookToMarkdown
  
  attr_reader :book
  
  def initialize(book)
    @book = book
  end
  
  def perform(review = "")
    create_note_from_book(review)
  end
  
  def save_to_public
    note = create_note_from_book
    path = Rails.root.join("public/notes/#{book.title} - #{book.author}.md")
    File.open(path, "w") { |file| file.write(note) }
  end
  
  private
  
  def read?(context)
    if context == :tag
      book.read ? "read" : "not-read"
    elsif context == :note
      if book.read
        "I read the #{book.page_count} pages"
      else
        "I didn't read the #{book.page_count} pages yet"
      end
    end
  end
  
  def no_review_body
<<-TERMINATOR
## Review
I didn't reviewed this book yet. 
TERMINATOR
  end
  
  def create_note_from_book(review)
<<-TERMINATOR
---
aliases: ["#{book.title}"] 
tags: 
  - "books/#{read?(:tag)}" 
  - "books/#{book.binding.parameterize(separator: "-")}" 
  - "books/#{book.language.parameterize(separator: "-")}"
  - "books/#{book.category.parameterize(separator: "-")}"
  - "books/#{book.book_type.parameterize(separator: "-")}"
---
%%id:#{book.id}%%
%%start:review%%
#{review.blank? ? no_review_body : review}
%%end:review%%
---
_The following was auto-generated by [Books and Binders](Books%20and%20Binders.md) and relates to the copy I own_
## #{book.title}
This book from #{book.author} was edited by #{book.editor} and released #{book.release_date.strftime("%m/%Y")}. I had it for #{book.price}â‚¬ from #{book.buyed_from}. #{read?(:note)}.

## More on this book :
- Buying date : #{book.buyed_at.strftime("%d/%m/%Y")}
- Buying condition : #{book.buying_condition}
- Actual condition : #{book.actual_condition}
- Book type : #{book.book_type}
- Binding : #{book.binding}
- Language : #{book.language}
- Category : #{book.category}
- ISBN : #{book.isbn}
- Weight in grams : #{book.weight_in_grams}
TERMINATOR
  end
  
end